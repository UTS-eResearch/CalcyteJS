#!/usr/bin/env node
const Collection = require("./collection.js");
const Index = require("./index_html.js");
const Datacite = require("./datacite.js");
const Bag = require("./bag.js");
const args = require("minimist")(process.argv.slice(2));
const shell = require("shelljs");
const program = require("commander");
const path = require("path");
const html_file_name = "CATALOG.html";
const catalog_file_name = "CATALOG.json";
const defaults = require("./defaults.js");

var dirs = undefined;
program
  .version("0.1.0")
  .description(
    "To run calcyfy on a group of directories pass it a list of directories"
  )
  .arguments("<directories...>")
  .action(function(directories) {
    dirs = directories;
  })
  .option(
    "-g, --generate-html",
    'Generate HTML from a "' + catalog_file_name + '" in a directory'
  )
  .option("-b,  --bag [bag-dir]", "Create Bagit Bag(s) under [bag-dir])")
  .option("-n,  --no", "No Citation - only applies ith --bag")
  .option(
    "-z,  --zip",
    "Create a zipped version of the bag - only applies with --bag"
  )
  .option("-d,  --depth", "Maximum depth to recurse into directories")
  .option(
    "-r,  --recurse",
    "Recurse into directories - up to " + defaults.max_depth
  )
  .option(
    "-m, --multiple",
    "Output multiple files instead of a single " + html_file_name
  );
var depth = 1;
program.parse(process.argv);
if (program.recurse) {
  depth = defaults.max_depth;
}
if (program.depth) {
  depth = program.depth;
}
var citer = new Datacite();
if (!program.rawArgs.length || !dirs) program.help();
var multiple = program.multiple;

if (program.generateHtml) {
  console.log("Generating html from exsiting " + catalog_file_name + " file");
  dirs.forEach(function(dir) {
    if (shell.test("-d", dir)) {
      if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
      }
      var catalog = path.join(dir, catalog_file_name);
    } else if (shell.test("-f", dir)) {
      if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
      }
      var catalog = dir;
      dir = path.dirname(catalog);
    }

    if (program.bag) {
      //Bag the HTML
      var bagger = new Bag();
      var dest = path.join(program.bag, path.basename(dir));
      shell.rm("-rf", dest);
      dir = bagger.bag(dir, program.bag);
      if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
      }
      catalog = path.join(dir, catalog_file_name);
      if (!program.no) {
        shell.mkdir(path.join(dest, "metadata"));
        var text_citation = citer.make_citation(
          catalog,
          path.join(dir, "metadata", "datacite.xml")
        );
      }
    }
    var index_maker = new Index();
    index_maker.init(
      catalog,
      path.join(dir, html_file_name),
      multiple,
      path.join(__dirname, "defaults/catalog_template.html")
    );

    if (program.bag) {
      bagger.update();
      if (program.zip) {
        shell.cd(bagger.target_dir);
        var zipname = path.join(
          "../",
          path.basename(bagger.target_dir) + ".zip"
        );
        shell.cd(bagger.target_dir);
        index_maker.make_index_html(text_citation, "");

        shell.exec("zip -r " + zipname + " " + "*");
      }
    }

    index_maker.make_index_html(text_citation, zipname);
  });
} else {
  //TODO - there is a lot of repetition here, sort it out

  dirs.forEach(function(dir) {
    if (shell.test("-d", dir)) {
      var c = new Collection();
      var output_dir = dir;
      c.read(dir, "./", undefined, depth);
      if (!path.isAbsolute(output_dir)) {
        output_dir = path.join(process.cwd(), output_dir);
      }
      if (program.bag) {
        output_dir = path.join(program.bag, path.basename(dir));
        c.bag(output_dir);
        if (!path.isAbsolute(output_dir)) {
          output_dir = path.join(process.cwd(), output_dir);
        }
      }
      c.to_json_ld().then(function() {
        var text_citation;
        if (program.bag) {
          c.generate_bag_info();
          c.save_bag_info();
          c.update();
          if (!program.no) {
            shell.mkdir(path.join(c.dir, "metadata"));
            text_citation = citer.make_citation(
              path.join(c.dir, defaults.catalog_json_file_name),
              path.join(c.dir, "metadata", "datacite.xml")
            );
          }
        }
        var index_maker = new Index();
        index_maker.init(
          path.join(output_dir, catalog_file_name),
          path.join(output_dir, html_file_name),
          multiple,
          path.join(__dirname, "defaults/catalog_template.html")
        );

        if (program.zip) {
          //TODO: Refactor: This is REPEATING YOURSELF
          shell.cd(c.dir);
          var zipname = path.join("../", path.basename(c.dir) + ".zip");
          var zip_cmd = "zip -r " + zipname + " *";
          index_maker.make_index_html(text_citation, "");
          shell.exec(zip_cmd);
        }

        index_maker.make_index_html(text_citation, zipname);
      });
    }
  });
}
