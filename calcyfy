#!/usr/bin/env node

/*
This is part of Calcyte a tool for implementing the DataCrate data packaging
spec.  Copyright (C) 2018  University of Technology Sydney

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

const Collection = require("./lib/collection.js");
const Index = require("./lib/index_html.js");
const Datacite = require("./lib/datacite.js");
const Bag = require("./lib/bag.js");
//const args = require("minimist")(process.argv.slice(2));
const path = require("path");
const shell = require("shelljs");
const program = require("commander");
const defaults = require("./lib/defaults.js");
const html_file_name = defaults.html_file_name;
const catalog_file_name = defaults.catalog_json_file_name;
const JSON_helper = require("./lib/jsonldhelper.js")
const fs = require("fs")
var dirs = undefined;
program
  .version("0.1.0")
  .description(
    "Generates DataCrate HTML for CATALOG.JSON files. Pass a list of directories. To create Spreadsheet files for entring metadata use -d or -r."
  )
  .arguments("<directories...>")
  .action(function(directories) {
    dirs = directories;
  })
  .option("-b,  --bag [bag-dir]", "Create Bagit Bag(s) under [bag-dir])")
  .option("-n,  --no", "No Citation - only applies ith --bag")
  .option(
    "-z,  --zip",
    "Create a zipped version of the bag - only applies with --bag"
  )
  .option("-d,  --depth", "Maximum depth to recurse into directories")
  .option("-r,  --recurse", "Recurse into directories looking for CATALOG_.xslc files")

  .option(
    "-u, --url [distro]",
    "Distribution URL"
  );
var depth = 0;
program.parse(process.argv);
if (program.recurse) {
  depth = defaults.max_depth;
}
if (program.depth) {
  depth = program.depth;
}
var citer = new Datacite();
if (!program.rawArgs.length || !dirs) program.help();

// TODO: Refactor this by if statement - there is a lot of repetition
if (depth) {
  //TODO - there is a lot of repetition here, sort it out
  dirs.forEach(function(dir) {
    if (shell.test("-d", dir)) {
      var c = new Collection();
      var output_dir = dir;
      c.read(dir, "./", undefined, depth);
      c.to_json_ld().then(function() {
        var json_helper = new JSON_helper()        
        json_helper.init(c.json_ld)  
        var catalog_path = path.join(c.dir, defaults.catalog_json_file_name)
        json_helper.trim_context()
        fs.writeFileSync(catalog_path, JSON.stringify(json_helper.json_ld, null, 2 ));
        generateHTML(catalog_path);
      });
    }
  });
}
else {
  dirs.forEach(function(dir) {
    var catalog_path
    if (shell.test("-d", dir)) {
      if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
      }
      catalog_path = path.join(dir, catalog_file_name);
    } else if (shell.test("-f", dir)) {
      if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
      }
      catalog_path = dir;
    }
    generateHTML(catalog_path);
})
}

function generateHTML(catalog_path) {

console.log("Generating html from existing " + catalog_path  + " file");
    if (!path.isAbsolute(catalog_path)) {
        catalog_path = path.join(process.cwd(), catalog_path);
    }
    var dir = path.dirname(catalog_path)
    shell.rm("-rf", path.join(dir, "CATALOG_files"));
    var json_helper = new JSON_helper();
    json_helper.init(require(catalog_path));
    if (program.url){
      if (!json_helper.root_node["distribution"]) {
        json_helper.root_node["distribution"] = []
      }
      json_helper.root_node["distribution"].push(
        {
          "@id": program.url
        }
      );
      json_helper.json_ld["@graph"].push(
        {
          "@id": program.url,
          "contentUrl": program.url,
          "@type": "DataDownload",
          "encodingFormat": "zip"
       });
       json_helper.json_ld["@context"]["DataDownload"] = "https://schema.org/DataDownload"
       json_helper.json_ld["@context"]["distribution"] = "https://schema.org/distribution"
       json_helper.init(json_helper.json_ld);
      }
      
    if (program.bag) {
      //Bag the HTML
      var bagger = new Bag();
      var dest = path.join(program.bag, path.basename(dir));
      var zipname
      shell.rm("-rf", dest);
      dir = bagger.bag(dir, program.bag, json_helper);
      bagger.generate_bag_info()
      bagger.save_bag_info()
      if (!path.isAbsolute(dir)) {
        dir = path.join(process.cwd(), dir);
      }
      catalog_path = path.join(dir, catalog_file_name);
      if (!program.no) {
        shell.mkdir("-p", path.join(dest, "metadata"));
        var text_citation = citer.make_citation(
          catalog_path,
          path.join(dir, "metadata", "datacite.xml")
        );
      }
    }
    var index_maker = new Index();
    json_helper.trim_context()
    index_maker.init({
      catalog_json: json_helper.json_ld,
      out_dir: path.join(dir),
      multiple_files: true,
      template_path: path.join(__dirname, "defaults/catalog_template.html")
    });
   
      
     
    if (program.bag) {
      bagger.update();
      if (program.zip) {
        shell.cd(bagger.target_dir);
        zipname = path.join("../", path.basename(bagger.target_dir) + ".zip");

        shell.cd(bagger.target_dir);
        index_maker.make_index_html(text_citation, "");

        shell.exec("zip -r " + zipname + " " + "*");
      }
    }

    index_maker.make_index_html(text_citation, zipname);

}